#include <iostream>
#include <fstream>
#include "Variable.class.hpp"
#include "Function.class.hpp"

#include <iostream>
#include <cstring>
#include <string>

void	upper_file(std::ostream &os, std::string av)
{
   int i;
 
   i = 0;
   while (av[i]) {
     if (av[i] >= 'a' && av[i] <= 'z') {
       os<< char(av[i] -32);
     }
     else
       os << char(av[i]);
     i++;
   }
}

void	iniVar(Variable *var, std::string className)
{
  int index = 0;
  std::string buff;

  buff = "y";
  std::string no;
  no = "n";
 
  while (buff != no)
    {
      var[index].add();
      var[index++].setClassName(className);
      std::cout<<"Add Variable [y/n]: ";
      getline(std::cin, buff);
    }
}

void	iniFunction(Function *function, std::string className)
{
  std::string no;
  int index = 0;
  std::string buff;

  
  no = "n";
  buff = "y";
  while (buff != no)
    {
      function[index].add();
      function[index++].setClassName(className);
      std::cout<<"Add function [n/y]: ";
      getline(std::cin, buff);
    }
}


void	writeFunctionPrototype(Function *function, std::string visibility, std::ostream &myfile)
{
  int nb = 0;
  nb = 0;
  while(nb < function[0].getNbFunction())
    {
      if (function[nb].getVisibility() == visibility)
	function[nb].writeFunctionPrototype(myfile);
      nb++;
    }
}

void	printVar(Variable *var, std::string visibility, std::ostream &myfile)
{
  int nb = 0;

  nb = 0;
  while(nb < var[0].getNbVariable())
    {
      if (var[nb].getVisibility() == visibility)
	var[nb].write_file(myfile);
      nb++;
    }
}

void	printGetSet(Variable *var, std::string visibility, std::ostream &myfile) 
{
  int nb = 0;

  while(nb < var[0].getNbVariable())
    {
      if (var[nb].getVisibility() == visibility)
	{
	  var[nb].write_file_getter_proto(myfile);
	  var[nb].write_file_setter_proto(myfile);
	}
      nb++;
    }
}

int	main(void)
{
  std::string buff;
  std::string className;
  
  Variable *var = new Variable[42];
  Function *function = new Function[42];
  /*
   * Initialisation of Function & Variable
   */
  std::cout<<"Enter Class Name: ";
  getline(std::cin, className);  

  //initialise the variable and return the number of var 
  iniVar(var, className);
 
  //initialise the function and return the number of function 
  iniFunction(function, className);
 

  /*
   * Create file .hpp with nameClass
   */
 
  std::ofstream myfile;
  std::string	str_class_hpp = className;
  str_class_hpp += ".class.hpp";

  /*
   * Write in "file".class.hpp
   */
  myfile.open (str_class_hpp.c_str());
 
   
  myfile<<"#ifndef ";
  upper_file(myfile, className);
  myfile<<"_CLASS_HPP"<<std::endl;

  myfile<<"# define ";
  upper_file(myfile, className);
  myfile<<"_CLASS_HPP"<<std::endl;
  myfile<<"#include "<<"<iostream>"<< std::endl;
  myfile<<std::endl;
  myfile<<"class "<< className<<std::endl;
  myfile<<"{"<<std::endl;
  
  myfile<<"public:"<<std::endl;
  
  //constructor & overload operator
  myfile<<"\t"<<className<<"(void);"<<std::endl;
  myfile<<"\t"<<className<<"("<<className<<" const &src);"<<std::endl;
  myfile<<"\t~"<<className<<"(void);"<<std::endl;
  myfile<<std::endl;
  myfile<<"\t"<<className<<"\t&operator=("<<className<<" const &srcOp);"<<std::endl;
  myfile<<std::endl;
  
  /*
   *
   * PUBLIC
   */
  //public function write in .hpp
  writeFunctionPrototype(function, "public", myfile);
  //public setter & getter from Variable write in .hpp
  printVar(var, "public", myfile);

  //public var write in .hpp
  myfile<<std::endl;
  printGetSet(var, "private", myfile);
  // the var must be "private" , 
  //if they are "public" we don't need getter and setter
  /*
   *
   * PROTECTED
   */
  myfile<<std::endl;
  myfile<<"protected:"<<std::endl;

  //protected function write in .hpp
  writeFunctionPrototype(function, "protected", myfile);
  //protected var write in .hpp
  myfile<<std::endl;
  printVar(var, "protected", myfile);
   
  /*
   *
   * PRIVATE
   */
  myfile<<std::endl;
  myfile<<"private:"<<std::endl;

  //private function write in .hpp
    writeFunctionPrototype(function, "private", myfile);
  //private var write in .hpp
    printVar(var, "private", myfile);

  myfile<<std::endl;
  myfile<<"};"<<std::endl;
  myfile<<"# endif"<<std::endl;
  
  myfile.close();


  /*
   * Create file .cpp with nameClass
   */
 
  std::ofstream myCppFile;
  std::string	str_class_cpp = className;
  str_class_cpp += ".class.cpp";

    /*
   * Write in "file".class.cpp
   */
  myCppFile.open (str_class_cpp.c_str());
  
  myCppFile<<"#include \""<<className<<".class.hpp\""<<std::endl<<std::endl;

  myCppFile<<std::endl << "/*\n * Constructor, destructor and overload operator\n */"<<std::endl;

    //constructor & overload operator
  myCppFile<<className<<"::"<<className<<"(void)"<<std::endl;
  myCppFile<<"{"<<std::endl;
  myCppFile<<"// std::cout<<\"const default call\""<<std::endl<<"}"<<std::endl;



  myCppFile<<className<<"::"<<className<<"("<<className<<" const &src)"<<std::endl;
  myCppFile<<"{"<<std::endl;
  myCppFile<<"// std::cout<<\"const default call\""<<std::endl<<"}"<<std::endl;


  myCppFile<<className<<"::~"<<className<<"(void)"<<std::endl;
    myCppFile<<"{"<<std::endl;
  myCppFile<<"// std::cout<<\"des default call\""<<std::endl<<"}"<<std::endl;
  myCppFile<<std::endl;

  myCppFile<<className<<" &\t"<<className<<"::operator=("<<className<<" const &srcOp)"<<std::endl;
  myCppFile<<"{"<<std::endl;
  myCppFile<<"// std::cout<<\"operator= call\""<<std::endl;
  std::cout<<"return *this;";
  std::cout<<"}"<<std::endl;
  myCppFile<<std::endl;
 

  myCppFile<<std::endl << "/*\n * Some stuff\n */"<<std::endl;
  //write function struct in .cpp
  int nb = 0;
  while(nb < function[0].getNbFunction())
    {
      myCppFile<<std::endl;
      function[nb++].writeFunctionStruct(myCppFile);
    }

  myCppFile<<std::endl  << "/*\n * Getter and Setter\n */"<<std::endl;
  //write getter and setter struct in .cpp
  nb = 0;
  while(nb < var[0].getNbVariable())
    {
      if (var[nb].getVisibility() == "private")
	{
	  var[nb].write_file_getter_struct(myCppFile);
	  var[nb].write_file_setter_struct(myCppFile);
	}
      nb++;
    }
  myCppFile.close();

  delete [] var;
  delete [] function;
    return 0;
}



  



      



/*
void	file(void)
{
  std::cout << "ok" << std::endl;
  myfile.open("className");
  myfile << "Writing this to a file.\n";
  myfile << std::endl;
  myfile << "test.\n";
  myfile.close();
}
*/
/*
  int remain(void)
{
  Function a;
  Variable b;
  a.print();
  std::cout << std::endl;
  b.print();
   return 0;
}
*/
